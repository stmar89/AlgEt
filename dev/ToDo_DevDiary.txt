   
    .m files from AbVarFq to 'translate':

    - IdealsOfIndex.m
    - TotRealTotPos.m
    - CMAlgAss.m
    - Completion.m
    - IntegralMatrices.m
    - RepsZConjugacy.m
    - PowerBass.m
    
    - padictocc.m ?
    - stuff about AVs 

    TODO:
    ### Priority ###
    - I have recently added the Type AlgEtMod. A lot more refinement is needed.
    - Make an intrinsic IntermediateModulesWithTrivialExtension to list M s.t. O!!M=MO. Experiments shows that the number of such modules is much smaller.
    - Then I should convert PowerOfBass.m
    
    ### Reorganize Quotients.m ###
    - Make Quotient(ZBasis(I),ZBAsis(J)), which returns Q,q. Note that q has domain AlgEt, so even if I is not created, we are fine.
    - Then Quotient for AlgEtIdl, AlgEtOrd and AlgEtMod should call this intrinsic.

    ### Various ###
    - an AlgEtToAlgAss intrinsic which returns an AlgAss and an isomorphism.
    - Improve saving and printing with LLL or MinimalGenerator (that is after CRT) to get smaller output.
    - add MaxCMTypeOverOrders

    ### TEST SUIT ###
    - It seems that in the test suit I dont have an order with CMType>2. Add ZFV of x^8+16. (<10 sec for WKICM). 
    - For each test, track the best running time. 
      If something get slower or faster than a previous version (up to some error)
    
    ### PICARD GROUP ###
    - Update: in th test suit I have made a for loop that shows that the timings for AlgEt is very inconsistent.
        Sometimes it is faster than RngOld, sometimes it is much slower. I don't understand!
    - PicardGroup is again slower for AlgEt than for AlgAss and FldNum. 
      I think that the changes made to how powers of invertible ideals are computed are slowing things down, 
      instead of speeding them up. 
      Need to investigate.
    - CHECK improve power of Ideals: if I is invertible, and I=aS+bS, then I^N=a^NS+b^NS. See Lemma in MinimalGenerators.m

    #### CRT ####
    - residue_class_field_primitive_element can probably be upgraded using ResidueField(P);
      the primitive elemnt should be cached.
    - residue_class_ring_unit_subgroup_generators can be improved. calling CRT makes a lot of unecessary computations
      see test2 in CRT.m: currently CRT given (a,b)->e such that e-a in I and e-b in J. 
      If one needs to run it several times for the same I and J, 
      then it is better to first run it with input (1,0)->e1 and (0,1)->e2.
      Then for any (a,b) the corresponding e would just be e=a*e1+b*e2.
    - CRT should be done also for a list of ideals, not just pairs I,J.
    - is ResidueField cached?
    - Make a CRT for modules : I/P1*...*Ps*I -> \prod_i (I/Pi*I)
      This is needed for finding a minimal set of generators of non-necessarly invertible ideals.

    #### OverOrders ####
    - I think that implenting equality testing for orders on a lower level would improve the situation a lot.

    ### WKICM ###
    - Possible improvement to WKICM(S).
      Let T be the smallest overorder of S such that St*T is invertible in T. Let ff be the (S:T).
      For EVERY overorder S' of S such that S't*T is invertible we have that each weak equiv class of S'
      will have a representative I such that ff \in I \in T.
      If looping over the subgroups is the most expensie part, then we might save some time in this way.
      UPDATE: it seems that generating the subgroups is not the most expensive part.
      I am doubtful that this idea will speed up the computation.

    - Possible improvement to WKICM(S).
      Doing the computation prime per prime should help.
      But there are many cases where this is still too slow with only one non-Gorestein prime.

    ### FIXED/DONE: kept for the record. ###
    - I tryed to speed up equality checking using the inbuild Hash function of the output of myHash function 
      for both AlgEtIdl and AlgEtOrd. But for EquationOrder of  f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096 
      I got some collisions, so I reverted it. Also, the gain in speed was very small.
    - moved quotient stuff from OverOrders.m and MinimalGenerators.m (quo_frac_idl) into a new package.
    - in TwoGenerators, if the ideal is knwon to be principal, then I should only return one generator. 
      We act only if #Generators gt 2.
    - I have made some cahnges in the way ColonIdeals are computed. I need to test with some wkicm
    - FindOverOrders seems now faster or comparable with the AlgAss version. We have improved the recursion, 
      by lowering the number of equality testing performed. 
      Note that if the same improvement is applied to AlgAss then we would probably lose the advantage.
    - IntermediateIdeals the results of 253_test_new3.txt are quite revealing. The raw output is contained in OUTPUT_new3.txt.
      In particular for Z[F] of x^8+16 we see that there are some orders S such the quotient T/(S:T) has a giganting number of
      subgroups, of which only a tiny numbers are S-modules. This contrary to the behaviour we see when the quotient is smaller.
      This has been implemented. The recomputation of 148_* took around 30hours, compared to the 9 original months. 
      I have restart the recomputation of the whole set.

