   
    .m files from AbVarFq to 'translate':

    - IdealsOfIndex.m
    - TotRealTotPos.m
    - CMAlgAss.m //already moved ComplexConjugate in ComplexConj.m, but not the CMType stuff
    - IntegralMatrices.m
    - RepsZConjugacy.m
    - PowerBass.m
    - padictocc.m ?
    - stuff about AVs 

    TODO:
    ### Priority ###
    - I have recently added the Type AlgEtMod. Many thinks that are valid for Idl should also be implemented for Modules. Eg, sum of modules, ideal*module, ...
    - Then I should convert PowerOfBass.m

    ### Various ###
    - an AlgEtToAlgAss intrinsic which returns an AlgAss and an isomorphism.
    - Improve saving and printing with LLL or MinimalGenerator (that is after CRT) to get smaller output.
    - add MaxCMTypeOverOrders

    ### TEST SUIT ###
    - It seems that in the test suit I dont have an order with CMType>2. Add ZFV of x^8+16. (<10 sec for WKICM). 
    - For each test, track the best running time. 
      If something get slower or faster than a previous version (up to some error)
    
    ### PICARD GROUP ###
    - Update: in th test suit I have made a for loop that shows that the timings for AlgEt is very inconsistent.
        Sometimes it is faster than RngOld, sometimes it is much slower. I don't understand!

    #### CRT ####
    - Make a CRT for modules : I/P1*...*Ps*I -> \prod_i (I/Pi*I)
      This is needed for finding a minimal set of generators of non-necessarly invertible ideals.

    #### OverOrders ####
    - I think that implenting equality testing for orders on a lower level would improve the situation a lot.

    ### WKICM ###
    - Possible improvement to WKICM(S).
      Let T be the smallest overorder of S such that St*T is invertible in T. Let ff be the (S:T).
      For EVERY overorder S' of S such that S't*T is invertible we have that each weak equiv class of S'
      will have a representative I such that ff \in I \in T.
      If looping over the subgroups is the most expensie part, then we might save some time in this way.
      UPDATE: it seems that generating the subgroups is not the most expensive part.
      I am doubtful that this idea will speed up the computation.

    - Possible improvement to WKICM(S).
      Doing the computation prime per prime should help.
      But there are many cases where this is still too slow with only one non-Gorestein prime.

    ### Other ###
    - Check if I can use Self() to improve construction of sequences. This is based on the following observation:
    [ 2^i : i in [1..10^1000]] computes each power of 2 separately.
    [ i gt 1 select Self(i-1)*2 else 2 ] constructs the same sequence recursively: at each step, it multiplies by 2.

    ### FIXED/DONE: kept for the record. ###
    - Done: &+ for sequence of ideals. &* doesn't seem to be more efficient than taking products.
    - residue_class_field_primitive_element is replaced by PrimitiveElementResidueField which is cached
    - Done: residue_class_ring_unit_subgroup_generators can be improved. 
      calling CRT makes a lot of unecessary computations see test2 in CRT.m: 
      currently CRT given (a,b)->e such that e-a in I and e-b in J. 
      If one needs to run it several times for the same I and J, 
      then it is better to first run it with input (1,0)->e1 and (0,1)->e2.
      Then for any (a,b) the corresponding e would just be e=a*e1+b*e2.
    - CRT should be done also for a list of ideals, not just pairs I,J.
    - Quotient(ZBasis(I),ZBasis(J)) will not be implemented. In the map we use that I has an inclusion_matrix. This makes it faster. So it is worth to generate at least the ideal I.
    - For WKIC_bar: I changed the recursion in Intermediate...WithTrivial...AndPrescr... so that in output one would store only the wkclasses. I thought this would speed up a bit the computation, since less equalities would have to be checked. But it seems that it slowed it down a bit, instead. So reverted to the previous version, were we generate all the intermediate modules (with mult ring and trivial ext) and then mod out by weak equivalence.
    - Introduced IntermediateModulesWithTrivialExtension, which uses MaximalIntermediateModules. 
      Faster since we can skip some part of the recursion.
    - Introduced IntermediateIdealsWithTrivialExtension, which uses MaximalIntermediateIdeals. 
      Faster since we can skip some part of the recursion.
    - I tryed to speed up equality checking using the inbuild Hash function of the output of myHash function 
      for both AlgEtIdl and AlgEtOrd. But for EquationOrder of  f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096 
      I got some collisions, so I reverted it. Also, the gain in speed was very small.
    - moved quotient stuff from OverOrders.m and MinimalGenerators.m (quo_frac_idl) into a new package.
    - in TwoGenerators, if the ideal is knwon to be principal, then I should only return one generator. 
      We act only if #Generators gt 2.
    - I have made some cahnges in the way ColonIdeals are computed. I need to test with some wkicm
    - FindOverOrders seems now faster or comparable with the AlgAss version. We have improved the recursion, 
      by lowering the number of equality testing performed. 
      Note that if the same improvement is applied to AlgAss then we would probably lose the advantage.
    - IntermediateIdeals the results of 253_test_new3.txt are quite revealing. The raw output is contained in OUTPUT_new3.txt.
      In particular for Z[F] of x^8+16 we see that there are some orders S such the quotient T/(S:T) has a giganting number of
      subgroups, of which only a tiny numbers are S-modules. This contrary to the behaviour we see when the quotient is smaller.
      This has been implemented. The recomputation of 148_* took around 30hours, compared to the 9 original months. 
      I have restart the recomputation of the whole set.

