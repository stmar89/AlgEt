   
    .m files from AbVarFq to 'translate':

    - IntegralMatrices.m
    - RepsZConjugacy.m
--> - PowerBass.m
    - stuff about AVs 
    - CMAlgAss.m // CMType missing stuff for IsogenyClassFq
    - padictocc.m ?

    TODO:
    ### Priority ###

    ### Optimization ###

    ### ICM/WKICM ###
    - Add either new intrinsics, or attributes to the orders, that contain an abstract representation of the orbit or of the whole icm together with a map/function that produces a representative. The map should have an inverse.
    What I need is to b able to do the following: let I be an R-ideal; compute the action of [I] in ICM(R) without using represntatives (of the isomorphism classes), but only the abstract represntatives. Similar to what happens with P,p:=PicardGroup(R): one can compute x:=I@@p and then use x*y with y in P, rather than working with ideals. This should make the functions to construct the isogeny graphs a lot faster.

    ### Modules ###
    - In IsomorphismClasses and IsIsomorphic, I should first order/test whether M and N have the same multiplicator ring S in K and with #M/PM = #N/PN for every singular prime of S, since these are necessary conditions of being isomorphic.
    - I have recently added the Type AlgEtMod. Many thinks that are valid for Idl should also be implemented for Modules. Eg, sum of modules, ideal*module, ...

    ### SmallReps ###
    - SmallRepresentative does not give a unique ideal: when you repeat the code it goes into a 'loop' of short ideals. It should be a canonical representative.
      	AttachSpec("~/packages_github/AlgEt/spec");
        _<x>:=PolynomialRing(Integers());
        E:=EquationOrder(EtaleAlgebra(x^4-100*x^3-100*x^2-100*x-100));
        time P,p:=PicardGroup(E);
        I0:=p(Random(P));
        I:=SmallRepresentative(I0);
        for i in [1..10] do
            Index(E,I);
            I:=SmallRepresentative(I);
        end for;

    ### Various ###
    - Improve saving and printing MinimalGenerator (that is after CRT) to get smaller output.
    - add MaxCMTypeOverOrders

    #### CRT ####
    - Make a CRT for modules : I/P1*...*Ps*I -> \prod_i (I/Pi*I)
      This is needed for finding a minimal set of generators of non-necessarly invertible ideals.

    ### Other ###
    ...

    ### FIXED/DONE: kept for the record. ###
    - I tried to improve MaximalIntermediateIdeal: compute the maximal ideals P in the support of I/J then the output is among the maximal sub-v-spaces of I/PI. But this turned out to be slower. I put it in the scratch pad.
    - Fixed another bug in CRT: The issue was rising when I1 and I2 are generated separatly with different ZBases. If they turned out to be equal, the equality copies all 'missing' attributes. If I1 was already used for a CRT and I2 not, then the assigned attribute I1`CRT_data would have been copied onto the empty one of I2. If ZBasis(I) and ZBasis(I2) are different we get a mistake! It is now fixed by storing with CRT_data the ZBasis wrt to which it was computed. The same philosophy is applied now to inclusion_matrix as well.
    - Fixed a bug in CRT, added ChineseRemainderTheoremFunctions. The old code only worked for 2 ideals. Fortunately, I have never used it before for more!!! In case, the correctedness of the output was asserted, so the previous computations are checked. 
    - replaced &* with &meet for coprime ideals because faster.
    - The current implementation of PrimesAbove goes through a Factorization over the maximal order.
      The same can be obtained using MaximalIntermediateIdeals, but it is slower. Discarded.
    - I have implemented the prime-per-prime computation of OverOrders. The computation of the P-overorders of R for each P c R takes a small percentage of the time of the whole procedure. This means that most of the time is spent on taking products of the various P-parts. See the verbose timing. I don't think that there is much I can do about it.
    - After fiddling with SmallRepresentative I have achieved consistency in timings of PicardGroup. It seems that a lot of time was lost in CoprimeRepresentative.
    - Added ZBasisLLL. It is used only when one stores ideals/orders, and when one really wants a small representative.
    - Done: &+ for sequence of ideals. &* doesn't seem to be more efficient than taking products.
    - residue_class_field_primitive_element is replaced by PrimitiveElementResidueField which is cached
    - Done: residue_class_ring_unit_subgroup_generators can be improved. 
      calling CRT makes a lot of unnecessary computations see test2 in CRT.m: 
      currently CRT given (a,b)->e such that e-a in I and e-b in J. 
      If one needs to run it several times for the same I and J, 
      then it is better to first run it with input (1,0)->e1 and (0,1)->e2.
      Then for any (a,b) the corresponding e would just be e=a*e1+b*e2.
    - CRT should be done also for a list of ideals, not just pairs I,J.
    - Quotient(ZBasis(I),ZBasis(J)) will not be implemented. In the map we use that I has an inclusion_matrix. This makes it faster. So it is worth to generate at least the ideal I.
    - For WKIC_bar: I changed the recursion in Intermediate...WithTrivial...AndPrescr... so that in output one would store only the wkclasses. I thought this would speed up a bit the computation, since less equalities would have to be checked. But it seems that it slowed it down a bit, instead. So reverted to the previous version, were we generate all the intermediate modules (with mult ring and trivial ext) and then mod out by weak equivalence.
    - Introduced IntermediateModulesWithTrivialExtension, which uses MaximalIntermediateModules. 
      Faster since we can skip some part of the recursion.
    - Introduced IntermediateIdealsWithTrivialExtension, which uses MaximalIntermediateIdeals. 
      Faster since we can skip some part of the recursion.
    - I tried to speed up equality checking using the inbuilt Hash function of the output of myHash function 
      for both AlgEtIdl and AlgEtOrd. But for EquationOrder of  f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096 
      I got some collisions, so I reverted it. Also, the gain in speed was very small.
    - moved quotient stuff from OverOrders.m and MinimalGenerators.m (quo_frac_idl) into a new package.
    - in TwoGenerators, if the ideal is known to be principal, then I should only return one generator. 
      We act only if #Generators gt 2.
    - I have made some changes in the way ColonIdeals are computed. I need to test with some wkicm
    - FindOverOrders seems now faster or comparable with the AlgAss version. We have improved the recursion, 
      by lowering the number of equality testing performed. 
      Note that if the same improvement is applied to AlgAss then we would probably lose the advantage.
    - IntermediateIdeals the results of 253_test_new3.txt are quite revealing. The raw output is contained in OUTPUT_new3.txt.
      In particular for Z[F] of x^8+16 we see that there are some orders S such the quotient T/(S:T) has a gigantic number of
      subgroups, of which only a tiny numbers are S-modules. This contrary to the behavior we see when the quotient is smaller.
      This has been implemented. The recomputation of 148_* took around 30hours, compared to the 9 original months. 
      I have restart the recomputation of the whole set.

