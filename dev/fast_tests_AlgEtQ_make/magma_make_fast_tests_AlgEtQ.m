/////////////////////////////////////////////////////
// Copyright 2025.
// Stefano Marseglia, stefano.marseglia89@gmail.com
// https://stmar89.github.io/index.html
// 
// Distributed under the terms of the CC-BY 4.0 licence.
// https://creativecommons.org/licenses/by/4.0/
/////////////////////////////////////////////////////

/*
    This script collects all the fast tests from the various .m files in AlgEtQ/ and puts them in a file (or files) which can then be run.

    input:
        - input: = a spec file containing a folder and a sequence of .m files to be scanned
        - output_file:= fast_tests_AlgEtQ.txt
        or 
        - prefix: = a prefix for the output files. If assigned, the output files will be named prefix_filename.txt


For example:
    magma -b input:=AlgEtQ.spec prefix:=../../../test/Ring/AlgEtQ/test generate_tests.m
*/


assert assigned input;
assert assigned output_file xor assigned prefix;
if assigned prefix and not assigned no_attach_spec then
    no_attach_spec := true;
end if;
SetColumns(0);
SetAutoColumns(false);

find_next:=function(inp,pos,str);
    //find the next occurrence in inp of str starting from the character inp[pos]. returns the position of the character right after str.
    // if Eof is reached returns 0;
    assert pos gt 0;
    if pos eq #inp then
        return 0;
    end if;
    while inp[pos] ne str[1] do
        pos+:=1;
        if pos eq #inp then
            return 0;
        end if;
    end while;
    n:=#str-1;
    while not inp[pos..pos+n] eq str do
        if pos+n+1 gt #inp then
            return 0;
        end if;
        pos +:=1;
    end while;
    return pos+n+1;
end function;


count_indentation := function(line)
    return #b where _, b, _ := Regexp("^[  ]*", line);
end function;

// this returns the empty string if no tests were found
generate_test_content_from_file:=function(folder, filename)
    inp := Read(Sprintf("%o/%o", folder, filename));
    pos:=1;
    t0:=find_next(inp,pos,"TESTS");
    t1:=find_next(inp,t0,"*/")-3;
    inp_local:=inp[t0..t1];
    // Remove trailing newlines
    while #inp_local gt 0 and inp_local[#inp_local] eq "\n" do
        Prune(~inp_local);
    end while;
    if StripWhiteSpace(inp_local) eq "" then
        return "";
    end if;
    // We remove the unecessary indentation
    lines := Split(inp_local,"\n" : IncludeEmpty);
    identation := Min([count_indentation(line) : line in lines | line ne ""]);
    lines := [line eq "" select line else line[identation+1..#line] : line in lines | line ne ""];
    inp_local := Join(lines,"\n");
    out := Sprintf("// Tests from %o/%o\n", folder, filename);
    out cat:= "time_start_local := Cputime();\n";
    out cat:= inp_local;
    out cat:= "\nSprintf(\"ttime %o\", Cputime(time_start_local));\n";
    return out;
end function;



header := "// This file was generated by package/Ring/AlgEtQ/magma_make_fast_tests_AlgEtQ.m\n";
header cat:= "// Do not edit this file manually!\n";
header cat:= "SetAssertions(2);\n";
if not assigned no_attach_spec then
    header cat:= "AttachSpec(\"" cat input cat "\");\n";
end if;
base_folder := Join(s[1..#s-1], "/") where s := Split(input, "/");
if base_folder eq "" then
    base_folder := ".";
end if;
input_split := Split(Read(input)," \t\n");//Split by spaces, tabs and newlines
assert input_split[#input_split] eq "}";
if input_split[1][1] eq "{" then // it is a list of files
    folder := base_folder;
    files := input_split[2..#input_split-1];
else
    folder := Join([base_folder, input_split[1]], "/");
    assert input_split[2] eq "{" and input_split[#input_split] eq "}";
    files := input_split[3..#input_split-1];
end if;

format := header;
if not assigned prefix then
    format cat:= "time_start := Cputime();\n%o\nCputime(time_start);\n";
else
    format cat:= "%o\nquit;";
end if;
tests := [<filename, generate_test_content_from_file(folder, filename)> : filename in files];
// Format and remove empty tests
tests := [<elt[1], Sprintf(format, elt[2])> : elt in tests | elt[2] ne ""];

if assigned prefix then
    for elt in tests do
        Write(Sprintf("%o_%o", prefix, elt[1]), elt[2] : Overwrite := true);
    end for;
else
    assert assigned output_file;
    Write(output_file, Join([elt[2] : elt in tests] cat ["quit;"], "\n") : Overwrite := true);
end if;

quit;

