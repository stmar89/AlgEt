/* vim: set syntax=magma :*/

    AttachSpec("~/packages_github/AbVarFq/packages.spec");
    SetClassGroupBounds("GRH");
    t0:=Cputime();
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000;
    K:=AssociativeAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 25 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    // _:=ICM(E); //computing the Pics is very slow!

    f:=x^4+291*x^3-988*x^2-1000*x-1000;
    K:=AssociativeAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 20 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    _:=ICM(E);

    f:=x^3+31*x^2+43*x+77;
    K:=AssociativeAlgebra(f);
    E:=EquationOrder(K);
    if #FindOverOrders(E) ne 15 then 
      test:=false;
      printf"\nERROR: OverOrders of f=%o\n",f;
    end if;
    SeqWC:=WKICM(E);
    if #SeqWC ne 23 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    _:=ICM(E);
    Cputime(t0);


	AttachSpec("~/packages_github/AlgEt/spec");
    SetClassGroupBounds("GRH");
    SetAssertions(3);

    SetProfile(true);
    t0:=Cputime();
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000;
    K:=EtaleAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 25 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    for S in FindOverOrders(E) do
        #NonGorensteinPrimes(S);
    end for;
    #PrimesAbove(Conductor(E)),Index(MaximalOrder(K),E);
    // _:=ICM(E); //computing the Pics is very slow!

    f:=x^4+291*x^3-988*x^2-1000*x-1000;
    K:=EtaleAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 20 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    for S in FindOverOrders(E) do
        #NonGorensteinPrimes(S);
    end for;
    #PrimesAbove(Conductor(E)),Index(MaximalOrder(K),E);
    _:=ICM(E);

    f:=x^3+31*x^2+43*x+77;
    K:=EtaleAlgebra(f);
    E:=EquationOrder(K);
    if #FindOverOrders(E) ne 15 then 
      test:=false;
      printf"\nERROR: OverOrders of f=%o\n",f;
    end if;
    SeqWC:=WKICM(E);
    if #SeqWC ne 23 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    for S in FindOverOrders(E) do
        #NonGorensteinPrimes(S);
    end for;
    #PrimesAbove(Conductor(E)),Index(MaximalOrder(K),E);
    _:=ICM(E);
    Cputime(t0);
    SetProfile(false);
    G:=ProfileGraph();
    ProfilePrintByTotalTime(G);


    //picard groups
	AttachSpec("~/packages_github/AlgEt/spec");
    SetClassGroupBounds("GRH");
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000;
    for i in [1..10] do
        i;
        "AlgEt";
        K1:=EtaleAlgebra(f);
        E1:=EquationOrder(K1);
        // no profiler
        time P1,p1:=PicardGroup(E1 : GRH:=true );
        "RngOrd";
        K2:=NumberField(f);
        E2:=EquationOrder(K2);
        time P2,p2:=PicardGroup(E2);
        "AlgEt";
        K1:=EtaleAlgebra(f);
        E1:=EquationOrder(K1);
        // no profiler
        time P1,p1:=PicardGroup(E1 : GRH:=true );
        // for some reason the next line is incredibly much slower!
        // time #PicardGroup(EquationOrder(EtaleAlgebra(f)));
    end for;

    // with profiler
    K1:=EtaleAlgebra(f);
    E1:=EquationOrder(K1);
    SetProfile(true);
        P1,p1:=PicardGroup(E1);
    SetProfile(false);
    ProfilePrintByTotalTime(ProfileGraph());
    /*
    //SLOW compared to FldNum
    E2:=EquationOrder(f);
    time P2,p2:=PicardGroup(E2);
    E2:=EquationOrder(f);
    SetProfile(true);
        P2,p2:=PicardGroup(E2);
    SetProfile(false);
    ProfilePrintByTotalTime(ProfileGraph());
    */

	AttachSpec("~/packages_github/AlgEt/spec");
    AttachSpec("~/packages_github/AbVarFq/packages.spec");
    SetClassGroupBounds("GRH");
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000; // AlgEt 534 vs NF 14.9
    //f:=x^3-1000*x^2-1000*x-1000;
    c:=Coefficients(f);  
    time Q,q:=PicardGroup(EquationOrder(EtaleAlgebra(f)) : GRH:=true);
    time #PicardGroup(EquationOrder(AssociativeAlgebra(f)));
    time P,p:=PicardGroup(EquationOrder(NumberField(f)));
    // time #[q(g) : g in Q]; //slow
    // time #[p(g) : g in P];
    
    time #PicardGroup(EquationOrder(EtaleAlgebra(f)));

    AttachSpec("~/packages_github/AlgEt/spec");
    _<x>:=PolynomialRing(Integers());
    f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096;
    A:=EtaleAlgebra(f);
    gensT:=[
        <[ 1, 0 ], [ 1/9, 5/6, 1, 41/18 ]>,
        <[ 0, 1 ], [ 0, 1, 0, 0 ]>,
        <[ 0, 0 ], [ 8/9, 11/6, 4/3, 133/18 ]>,
        <[ 0, 0 ], [ 0, 8/3, 7/3, 29/3 ]>,
        <[ 0, 0 ], [ 0, 0, 3, 3 ]>,
        <[ 0, 0 ], [ 0, 0, 0, 18 ]>
    ];
    gensT:=[ A ! g : g in gensT ];
    T:=Order(gensT);
    _:=#PicardGroup(T); // this used to trigger a bug in CRT. now fixed

	
    // #### overorders
    clear;
	_<x>:=PolynomialRing(Integers());
    f:=x^4-10000*x^3-10000*x^2-10000*x-10000; 
    // AlgAss 30 sec vs AlgEt 21 no profiler.
    // with the profiler on, AlgEt is slower.
    /* 
    AttachSpec("~/packages_github/AbVarFq/packages.spec");
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    time ooass:=FindOverOrders(Eass);
    */
    AttachSpec("~/packages_github/AlgEt/spec");
    // no profiler
    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    t0:=Cputime();
        ooet:=FindOverOrders(Eet);
    t1:=Cputime(t0); t1;
    tprevbest:=13.7; //on diophantus
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "FindOverOrders for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "FindOverOrders for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    assert #ooet eq 297;
    /*
    // with profiler
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    SetProfile(true);
    ooass:=FindOverOrders(Eass);
    SetProfile(false);
    G1:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G1,30));

    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    SetProfile(true);
    ooet:=FindOverOrders(Eet);
    SetProfile(false);
    G2:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G2,30));
    */


    // a bigger example. after improving the recursion in FindOverOrders we have reached the timings of AlgAss (with the old method for recursion). So I believe we could still improve a lot if the equality testing is done on a lower level..
    clear;
    /*
    AttachSpec("~/packages_github/AbVarFq/packages.spec");
	_<x>:=PolynomialRing(Integers());
    f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096;
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    time ooass:=FindOverOrders(Eass); //~900 sec
    assert #ooass eq 3312;
    */
    AttachSpec("~/packages_github/AlgEt/spec");
    // no profiler
	_<x>:=PolynomialRing(Integers());
    f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096;
    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    t0:=Cputime();
        ooet:=FindOverOrders(Eet);
    t1:=Cputime(t0); t1;
    tprevbest:=693; // on diophantus
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "FindOverOrders for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "FindOverOrders for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    assert #ooet eq 3312; 

    /*
    // with profiler
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    SetProfile(true);
    ooass:=FindOverOrders(Eass);
    SetProfile(false);
    G1:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G1,30));

    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    SetProfile(true);
    ooet:=FindOverOrders(Eet);
    SetProfile(false);
    G2:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G2,30));
    */

    // ### WKICM
    clear;
	_<x>:=PolynomialRing(Integers());
    f:=x^8+16; 
    AttachSpec("~/packages_github/AlgEt/spec");

    // no profiler
    A:=EtaleAlgebra(f);
    F:=PrimitiveElement(A);
    R:=Order([F,2/F]); 
    oo:=FindOverOrders(R : populateoo_in_oo:=true); //to avoid any computation related to the OverOrders
    t0:=Cputime();
        #WKICM(R);
    t1:=Cputime(t0); t1;
    tprevbest:=4.5; // diophantus
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "WKICM for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "WKICM for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    /* 
    // with profiler
    A:=EtaleAlgebra(f);
    F:=PrimitiveElement(A);
    R:=Order([F,2/F]); 
    oo:=FindOverOrders(R);
    SetProfile(true);
        #WKICM(R);
    SetProfile(false);
    G2:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G2,30));
    */

    // much bigger example
    clear;
	_<x>:=PolynomialRing(Integers());
    f:=x^8+16; 
    AttachSpec("~/packages_github/AlgEt/spec");
    A:=EtaleAlgebra(f);
    R:=EquationOrder(A);
    ooR:=FindOverOrders(R);
    data:=eval(Read("~/packages_github/AlgEt/dev/input_big_test_WKICM.txt"));
    // data contains a Seq with entries <S,T,ff,out> where
    // S is the ZBasis of the order S
    // T (resp. ff) is the ZBasis of the overorder T of S (resp ff=(S:T))
    // out is the number of intermedite S-modules between T and ff.
    // data is already sorted wrt to the size of out.
    oo:={@ @};
    for x in data do
        S:=Order([ A!z:z in x[1]]);
        S`OverOrders:={@ T :T in ooR | S subset T @};
        Include(~oo,S);
    end for;
    "IntermediateIdeals";
// SetProfile(true);
    out_new:=[]; //oo[15] takes ~100 seconds
    for i->S in oo do
        t0:=Cputime();
        delete S`WKICM_bar;
        N:=#WKICM_bar(S : Method:="IntermediateIdeals");
        t1:=Cputime(t0);
        out:=<i,N,t1>; out;
        Append(~out_new,out);
    end for;
    // out on diophantus
    out_prev:=[
    <1, 4, 3.130>,
    <2, 4, 2.300>,
    <3, 2, 2.180>,
    <4, 4, 2.810>,
    <5, 2, 1.840>,
    <6, 4, 2.890>,
    <7, 4, 2.930>,
    <8, 4, 2.540>,
    <9, 2, 1.770>,
    <10, 4, 2.520>,
    <11, 4, 2.140>,
    <12, 4, 2.450>,
    <13, 4, 2.190>,
    <14, 6, 24.570>,
    <15, 6, 92.750>,
    <16, 6, 96.850>,
    <17, 6, 95.610>,
    <18, 6, 216.540>,
    <19, 6, 772.750> 
    ];
// SetProfile(false);
// ProfilePrintByTotalTime(ProfileGraph() : Max:=30);
    assert forall{ i : i in [1..#out_prev] | out_prev[i,2] eq out_new[i,2] };
    tprevbest:=&+[ o[3] : o in out_prev ];
    t1:=&+[ o[3] : o in out_new ];
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "WKICM for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "WKICM for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    "LowIndexProcess";
    outputLowIndexProcess:=[];
    for i->S in oo[1..14] do //the last five are very slow.
        t0:=Cputime();
        N:=#WKICM_bar(S : Method:="LowIndexProcess");
        t1:=Cputime(t0);
        out:=<i,N,t1>; out;
        Append(~outputLowIndexProcess,out);
        assert N eq outputIntermediateIdeals[i][2];
    end for;

