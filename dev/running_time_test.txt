/* vim: set syntax=magma :*/

    AttachSpec("~/packages_github/AbVarFq/packages.spec");
    SetClassGroupBounds("GRH");
    t0:=Cputime();
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000;
    K:=AssociativeAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 25 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    // _:=ICM(E); //computing the Pics is very slow!

    f:=x^4+291*x^3-988*x^2-1000*x-1000;
    K:=AssociativeAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 20 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    _:=ICM(E);

    f:=x^3+31*x^2+43*x+77;
    K:=AssociativeAlgebra(f);
    E:=EquationOrder(K);
    if #FindOverOrders(E) ne 15 then 
      test:=false;
      printf"\nERROR: OverOrders of f=%o\n",f;
    end if;
    SeqWC:=WKICM(E);
    if #SeqWC ne 23 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    _:=ICM(E);
    Cputime(t0);


	AttachSpec("~/packages_github/AlgEt/spec");
    SetClassGroupBounds("GRH");
    SetAssertions(3);

    SetProfile(true);
    t0:=Cputime();
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000;
    K:=EtaleAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 25 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    for S in FindOverOrders(E) do
        #NonGorensteinPrimes(S);
    end for;
    #PrimesAbove(Conductor(E)),Index(MaximalOrder(K),E);
    // _:=ICM(E); //computing the Pics is very slow!

    f:=x^4+291*x^3-988*x^2-1000*x-1000;
    K:=EtaleAlgebra(f);
    E:=EquationOrder(K);
    SeqWC:=WKICM(E);
    if #SeqWC ne 20 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    for S in FindOverOrders(E) do
        #NonGorensteinPrimes(S);
    end for;
    #PrimesAbove(Conductor(E)),Index(MaximalOrder(K),E);
    _:=ICM(E);

    f:=x^3+31*x^2+43*x+77;
    K:=EtaleAlgebra(f);
    E:=EquationOrder(K);
    if #FindOverOrders(E) ne 15 then 
      test:=false;
      printf"\nERROR: OverOrders of f=%o\n",f;
    end if;
    SeqWC:=WKICM(E);
    if #SeqWC ne 23 then
      test:=false;
      printf"\nERROR: SeqWC of f=%o\n",f;
    end if;
    for S in FindOverOrders(E) do
        #NonGorensteinPrimes(S);
    end for;
    #PrimesAbove(Conductor(E)),Index(MaximalOrder(K),E);
    _:=ICM(E);
    Cputime(t0);
    SetProfile(false);
    G:=ProfileGraph();
    ProfilePrintByTotalTime(G);


    //picard groups
	AttachSpec("~/packages_github/AlgEt/spec");
    SetClassGroupBounds("GRH");
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000;
    for i in [1..10] do
        i;
        "AlgEt";
        K1:=EtaleAlgebra(f);
        E1:=EquationOrder(K1);
        // no profiler
        time P1,p1:=PicardGroup(E1 : GRH:=true );
        "RngOrd";
        K2:=NumberField(f);
        E2:=EquationOrder(K2);
        time P2,p2:=PicardGroup(E2);
        "AlgEt";
        K1:=EtaleAlgebra(f);
        E1:=EquationOrder(K1);
        // no profiler
        time P1,p1:=PicardGroup(E1 : GRH:=true );
        // for some reason the next line is incredibly much slower!
        // time #PicardGroup(EquationOrder(EtaleAlgebra(f)));
    end for;

    // with profiler
    K1:=EtaleAlgebra(f);
    E1:=EquationOrder(K1);
    SetProfile(true);
        P1,p1:=PicardGroup(E1);
    SetProfile(false);
    ProfilePrintByTotalTime(ProfileGraph());
    /*
    //SLOW compared to FldNum
    E2:=EquationOrder(f);
    time P2,p2:=PicardGroup(E2);
    E2:=EquationOrder(f);
    SetProfile(true);
        P2,p2:=PicardGroup(E2);
    SetProfile(false);
    ProfilePrintByTotalTime(ProfileGraph());
    */

	AttachSpec("~/packages_github/AlgEt/spec");
    AttachSpec("~/packages_github/AbVarFq/packages.spec");
    SetClassGroupBounds("GRH");
	_<x>:=PolynomialRing(Integers());
    f:=x^4-1000*x^3-1000*x^2-1000*x-1000; // AlgEt 534 vs NF 14.9
    //f:=x^3-1000*x^2-1000*x-1000;
    c:=Coefficients(f);  
    time Q,q:=PicardGroup(EquationOrder(EtaleAlgebra(f)) : GRH:=true);
    time #PicardGroup(EquationOrder(AssociativeAlgebra(f)));
    time P,p:=PicardGroup(EquationOrder(NumberField(f)));
    // time #[q(g) : g in Q]; //slow
    // time #[p(g) : g in P];
    
    time #PicardGroup(EquationOrder(EtaleAlgebra(f)));

	
    // #### overorders
    clear;
	_<x>:=PolynomialRing(Integers());
    f:=x^4-10000*x^3-10000*x^2-10000*x-10000; 
    // AlgAss 30 sec vs AlgEt 21 no profiler.
    // with the profiler on, AlgEt is slower.
    /* 
    AttachSpec("~/packages_github/AbVarFq/packages.spec");
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    time ooass:=FindOverOrders(Eass);
    */
    AttachSpec("~/packages_github/AlgEt/spec");
    // no profiler
    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    t0:=Cputime();
        ooet:=FindOverOrders(Eet);
    t1:=Cputime(t0); t1;
    tprevbest:=21.5;
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "FindOverOrders for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "FindOverOrders for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    assert #ooet eq 297;
    /*
    // with profiler
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    SetProfile(true);
    ooass:=FindOverOrders(Eass);
    SetProfile(false);
    G1:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G1,30));

    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    SetProfile(true);
    ooet:=FindOverOrders(Eet);
    SetProfile(false);
    G2:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G2,30));
    */


    // a bigger example here we are slower.
    clear;
    /*
    AttachSpec("~/packages_github/AbVarFq/packages.spec");
	_<x>:=PolynomialRing(Integers());
    f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096;
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    time ooass:=FindOverOrders(Eass); //~900 sec
    assert #ooass eq 3312;
    */
    AttachSpec("~/packages_github/AlgEt/spec");
    // no profiler
	_<x>:=PolynomialRing(Integers());
    f:=x^6 - 3*x^5 - 3*x^4 + 65*x^3 - 48*x^2 - 768*x + 4096;
    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    t0:=Cputime();
        ooet:=FindOverOrders(Eet);
    t1:=Cputime(t0); t1;
    tprevbest:=1300;
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "FindOverOrders for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "FindOverOrders for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    assert #ooet eq 3312; 

    /*
    // with profiler
    Aass:=AssociativeAlgebra(f);
    Eass:=EquationOrder(Aass);
    SetProfile(true);
    ooass:=FindOverOrders(Eass);
    SetProfile(false);
    G1:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G1,30));

    Aet:=EtaleAlgebra(f);
    Eet:=EquationOrder(Aet);
    SetProfile(true);
    ooet:=FindOverOrders(Eet);
    SetProfile(false);
    G2:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G2,30));
    */

    // ### WKICM
    clear;
	_<x>:=PolynomialRing(Integers());
    f:=x^8+16; 
    AttachSpec("~/packages_github/AlgEt/spec");

    // no profiler
    A:=EtaleAlgebra(f);
    F:=PrimitiveElement(A);
    R:=Order([F,2/F]); 
    oo:=FindOverOrders(R);
    t0:=Cputime();
        #WKICM(R);
    t1:=Cputime(t0); t1;
    tprevbest:=5.9;
    if Abs(t1 - tprevbest) gt 0.1*tprevbest then
        if t1 lt tprevbest then
            printf "WKICM for %o got faster. Update the previous best known time\n",f;
        elif t1 gt tprevbest then
            printf "WKICM for %o got slower. The previous code was better.\n",f;
        end if;
    end if;
    /* 
    // with profiler
    A:=EtaleAlgebra(f);
    F:=PrimitiveElement(A);
    R:=Order([F,2/F]); 
    oo:=FindOverOrders(R);
    SetProfile(true);
        #WKICM(R);
    SetProfile(false);
    G2:=ProfileGraph();
    ProfilePrintByTotalTime(ProfilePruneGraphByTime(G2,30));
    */

