/* vim: set syntax=magma :*/

/////////////////////////////////////////////////////
// Stefano Marseglia, Utrecht University, s.marseglia@uu.nl
// http://www.staff.science.uu.nl/~marse004/
/////////////////////////////////////////////////////

/*
    Here you can find the code to reproduce the examples in the paper:
        "Modules over orders, conjugacy classes of integral matrices, and abelian varieties over finite fields",
        Stefano Marseglia
        https://arxiv.org/abs/2208.05409
    One needs several functionalities for étale algebra.
    Please download the following repository on your machine:
        https://github.com/stmar89/AlgEt

    WARNING:.
    The isomorphism testing (IsIsomorphic) with the Method Magma is based on results from 
        "The conjugacy problem in GL(n, Z)", T. Hofmann, B. Eick and E. A. O’Brien, J. Lond. Math. Soc. (2) 100 (2019), no. 3, 731–756.
    and the corresponding implementation of their code, which is in MAGMA.
    In the paper, we suggest to use instead to use the results from
        "Computation of lattice isomorphisms and the integral matrix similarity problem", T. Hofmann, W. Bley and H. Johnston,
        https://arxiv.org/abs/2202.03526
    Their code at the moment is not implemented in MAGMA, but only in julia package Hecke/Nemo. Requires julia 1.7.0 or higher and Hecke http://www.thofma.com/Hecke.jl/dev/ 
    See below for instructions.
*/

// ###################
// ### Example 6.1 ###
// ###################

// Modify the following lines with the folder where you have downloaded the repository https://github.com/stmar89/AlgEt
AttachSpec("~/packages_github/AlgEt/spec");
AttachSpec("~/packages_github/AlgEt/specMod");

_<x>:=PolynomialRing(Integers());
m1:=x^2-x+3;
m2:=x^2+x+3;
s1:=2;
s2:=1;
h:=m1^s1*m2^s2; h;
q:=Integers() ! Truncate( ConstantCoefficient(h)^(2/Degree(h)) );

K1:=NumberField(m1);
K2:=NumberField(m2);
K:=EtaleAlgebra([K1,K2]); // K = K1 x K2
pi:=PrimitiveElement(K); //
R:=Order([pi,q/pi]);
O:=MaximalOrder(K);
V:=EtaleAlgebra([K1,K1,K2]); // V = K1^s1 x K2^s2
m:=NaturalAction(K,V); // m:K -> V component-wise diagonal action of K on V
time classes:=IsomorphismClasses(R,m : Method:="julia -J /tmp/Hecke.so ~/packages_github/AlgEt/AlgEtQMod/"); // changes this line accordingly to wheter you have used Hecke.Build() or not,
                                                                                                   // and to the appriopriate path to the the packages AlgEt. 
                                                                                                   // It should take ~12 seconds.
#classes;
// classes now contains the representatives of the isomorphism classes of the sub-R-modules of V.
// By Theorem 5.1, they correspond to the Fq-isomorphism classes of abelian varieties in the isogeny class determined by h.




// ###################
// ### Example 6.2 ###
// ###################
// We want to find the representatives of the conjugacy classes of integral matrices with minimal polynomial m1*m2 and characteristic polynomial h.
// This code is essentially the same of the one from the previous example, but replacing R=Z[pi,q/pi] with R=Z[pi]. Since E is smaller than R, there will be more candidates. So this computation will take more time to run than the previous one.

// Modify the following lines with the folder where you have downloaded the repository https://github.com/stmar89/AlgEt
AttachSpec("~/packages_github/AlgEt/spec");
AttachSpec("~/packages_github/AlgEt/specMod");

_<x>:=PolynomialRing(Integers());
m1:=x^2-x+3;
m2:=x^2+x+3;
s1:=2;
s2:=1;
h:=m1^s1*m2^s2; h;
K1:=NumberField(m1);
K2:=NumberField(m2);
K:=EtaleAlgebra([K1,K2]); // K = K1 x K2
pi:=PrimitiveElement(K); 
R:=Order([pi]);
O:=MaximalOrder(K);
V:=EtaleAlgebra([K1,K1,K2]); // V = K1^s1 x K2^s2
m:=NaturalAction(K,V); // m:K -> V component-wise diagonal action of K on V
time classes:=IsomorphismClasses(R,m : Method:="julia -J /tmp/Hecke.so ~/packages_github/AlgEt/AlgEtQMod/"); // changes this line accordingly to wheter you have used Hecke.Build() or not,
                                                                                                   // and to the appriopriate path to the the packages AlgEt
                                                                                                   // It should take ~200 secs
#classes;
// By Theorem 4.1, they correspond to the conjugacy classes of matrices with with minimal polynomial m1*m2 and characteristic polynomial h.
// We now print the 4 matrices. These matrices might not be the same one as in the paper, but they are conjugate to them.
for I in classes do
   mat:=Matrix(AbsoluteCoordinates([m(pi)*z : z in ZBasis(I)],ZBasis(I)));
   assert MinimalPolynomial(mat) eq m1*m2;
   assert CharacteristicPolynomial(mat) eq h;
   printf "%o\n\n",mat;
end for;

